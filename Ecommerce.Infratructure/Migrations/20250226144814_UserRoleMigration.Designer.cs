// <auto-generated />
using System;
using Ecommerce.Infratructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ecommerce.Infratructure.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    [Migration("20250226144814_UserRoleMigration")]
    partial class UserRoleMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("038463d9-a7b7-4e30-9669-9962c1a01b18"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dispositivos eletrônicos e acessórios.",
                            Name = "Eletrônicos"
                        },
                        new
                        {
                            Id = new Guid("1f22bf92-2a35-4cf8-b22a-502598f6bf56"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Roupas, calçados e acessórios.",
                            Name = "Moda"
                        },
                        new
                        {
                            Id = new Guid("2b3fd91f-51a5-4134-a22c-c37eb4d03ffe"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Produtos de beleza, perfumes e higiene pessoal.",
                            Name = "Beleza e Cuidados Pessoais"
                        },
                        new
                        {
                            Id = new Guid("2d0b1e97-31bf-4969-90d9-554085ade54f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Móveis, utensílios domésticos e decoração.",
                            Name = "Casa e Decoração"
                        },
                        new
                        {
                            Id = new Guid("467010a7-7eea-431b-be34-7f6b47a65ddd"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Artigos esportivos, bicicletas e equipamentos de ginástica.",
                            Name = "Esportes e Lazer"
                        },
                        new
                        {
                            Id = new Guid("551d8bfb-3328-4952-b2be-fa6991fae8d3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Peças, acessórios e produtos automotivos.",
                            Name = "Automotivo"
                        },
                        new
                        {
                            Id = new Guid("714ebf08-6949-445b-b405-d7d1b133e23e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Livros, revistas e materiais de estudo.",
                            Name = "Livros"
                        },
                        new
                        {
                            Id = new Guid("7e036bab-a332-435a-a382-2503ab9cd39c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Brinquedos, jogos e videogames.",
                            Name = "Brinquedos e Games"
                        },
                        new
                        {
                            Id = new Guid("814ea3c0-fac6-4e7a-a237-994c66cf8309"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Suplementos, produtos médicos e bem-estar.",
                            Name = "Saúde e Bem-estar"
                        },
                        new
                        {
                            Id = new Guid("89a470fd-ed2a-4b42-8049-f1e73ab9ed44"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Produtos para animais de estimação.",
                            Name = "Pet Shop"
                        },
                        new
                        {
                            Id = new Guid("9d662433-2d41-4844-96b9-9fdf3b3d0589"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Ferramentas, materiais de construção e segurança.",
                            Name = "Ferramentas e Construção"
                        },
                        new
                        {
                            Id = new Guid("9eb5a466-0e78-47c2-ae8e-5957f71f601f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Instrumentos musicais, filmes e shows.",
                            Name = "Música e Entretenimento"
                        },
                        new
                        {
                            Id = new Guid("c17b8d60-433b-4418-997c-823dd771aaaa"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Vinhos, cervejas e destilados.",
                            Name = "Bebidas"
                        },
                        new
                        {
                            Id = new Guid("c8baf944-31f8-4b42-b7a9-4360ed654ca0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Computadores, hardware e softwares.",
                            Name = "Informática"
                        },
                        new
                        {
                            Id = new Guid("cba476c6-63c2-4881-9cbe-caeb7e64877e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Relógios, joias e bijuterias.",
                            Name = "Joias e Relógios"
                        },
                        new
                        {
                            Id = new Guid("e87980c7-a781-4d8d-aa72-dc010336c06f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Geladeiras, fogões, micro-ondas e mais.",
                            Name = "Eletrodomésticos"
                        },
                        new
                        {
                            Id = new Guid("eccfb727-247b-40a5-87eb-24b28329923d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Material escolar e para escritório.",
                            Name = "Papelaria e Escritório"
                        },
                        new
                        {
                            Id = new Guid("f3ecaecb-0ab7-46c6-a2a8-ed5c46f189e1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Pacotes de viagem, passagens e hospedagem.",
                            Name = "Viagens e Turismo"
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Maker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Maker");

                    b.HasData(
                        new
                        {
                            Id = new Guid("081d772f-b2cb-4294-a696-c7abd6def254"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Apple"
                        },
                        new
                        {
                            Id = new Guid("0de85792-6070-4b86-9160-0255ad272a9d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = new Guid("1436fb39-e357-4dbc-bcae-9ef5f2484f24"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sony"
                        },
                        new
                        {
                            Id = new Guid("1551ad97-d6ee-453a-a6a2-ebed64e8f193"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = new Guid("15a9e330-d5d9-425e-ac04-be14d46af7c0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Dell"
                        },
                        new
                        {
                            Id = new Guid("197d2342-230f-4a69-89e1-a9c9b353a12c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "HP"
                        },
                        new
                        {
                            Id = new Guid("1d3ab503-366a-40ba-b7b7-8938c04a3ca1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Lenovo"
                        },
                        new
                        {
                            Id = new Guid("2125e0e9-c171-4986-ad10-220550c2d048"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Asus"
                        },
                        new
                        {
                            Id = new Guid("23fae23f-686a-4713-9322-68f9b657e1ed"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Acer"
                        },
                        new
                        {
                            Id = new Guid("380f06e1-f695-49b2-89ba-3a4ce9b60d55"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Razer"
                        },
                        new
                        {
                            Id = new Guid("4587d91f-e8db-450b-b464-1e1e8553f8e1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Xiaomi"
                        },
                        new
                        {
                            Id = new Guid("4651d4f6-4fa1-4d7d-acaf-377eb4d2bce5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Huawei"
                        },
                        new
                        {
                            Id = new Guid("476b5d92-494c-4aaa-9ce1-9582a8c57f70"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "OnePlus"
                        },
                        new
                        {
                            Id = new Guid("4d88552f-1bee-4f3b-acf0-25f0ca3d560f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Google"
                        },
                        new
                        {
                            Id = new Guid("5aa01c32-da72-4872-a468-7a304d949398"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Amazon"
                        },
                        new
                        {
                            Id = new Guid("5c6dda58-3546-4cea-bf53-a1ea52078898"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Logitech"
                        },
                        new
                        {
                            Id = new Guid("5f5cc7d7-d617-456d-8a20-98c34106ca9b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Intel"
                        },
                        new
                        {
                            Id = new Guid("66cb463b-d653-449f-b122-4215f699b40b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "AMD"
                        },
                        new
                        {
                            Id = new Guid("6c3e66b4-05d7-429e-b5dd-8ae3041ee0d7"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "NVIDIA"
                        },
                        new
                        {
                            Id = new Guid("6e4a564f-8ecd-4a5b-9f0e-e1fe266a347a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Corsair"
                        },
                        new
                        {
                            Id = new Guid("75948f5f-9043-44c0-8362-8ce71b6969b8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Nike"
                        },
                        new
                        {
                            Id = new Guid("776e10fc-8ddb-4ec4-b824-c4805ce84943"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = new Guid("7d9bef7b-dd9c-4cdd-a67a-558335ea066c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Puma"
                        },
                        new
                        {
                            Id = new Guid("7e6c2acf-f643-476f-9285-112963b2493e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Under Armour"
                        },
                        new
                        {
                            Id = new Guid("7f0f16bd-5940-4f8a-92d5-d1e97d6b54ad"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Lacoste"
                        },
                        new
                        {
                            Id = new Guid("801dd381-5c50-4f72-bfb2-39769c34880c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Tommy Hilfiger"
                        },
                        new
                        {
                            Id = new Guid("85514469-fe3f-46e0-a5c4-b1f9f2d29746"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Zara"
                        },
                        new
                        {
                            Id = new Guid("8873441b-4d1b-44ae-9610-bdb6ade84b06"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "H&M"
                        },
                        new
                        {
                            Id = new Guid("8aac1b65-6525-482e-8a31-291bc8ec98e8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Levi's"
                        },
                        new
                        {
                            Id = new Guid("8f1c5306-a1fb-4b77-a5d5-7b0b8ec00c17"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Gucci"
                        },
                        new
                        {
                            Id = new Guid("924e4b20-2153-447b-b167-287a4df7d85c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Prada"
                        },
                        new
                        {
                            Id = new Guid("9ae81c3b-11d4-4653-8a2f-48d0862fc48c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Balenciaga"
                        },
                        new
                        {
                            Id = new Guid("9b96367f-355b-484d-8d17-40030ceb01ac"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Versace"
                        },
                        new
                        {
                            Id = new Guid("9d70eb42-538e-4a0c-aa61-a93894096421"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Dolce & Gabbana"
                        },
                        new
                        {
                            Id = new Guid("9e1cd02f-de33-4a8b-80ea-384a3b28b069"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "L'Oréal"
                        },
                        new
                        {
                            Id = new Guid("a9153d71-1f5e-4987-9c9b-9e5e4277977b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Maybelline"
                        },
                        new
                        {
                            Id = new Guid("ac625e6e-ff0f-4194-8d79-2ee0450dfe22"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "MAC Cosmetics"
                        },
                        new
                        {
                            Id = new Guid("b203c2cb-8853-45ba-afb1-481719c7d992"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Dior"
                        },
                        new
                        {
                            Id = new Guid("b2ce2952-cc4e-4281-9dc8-591030366dad"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Chanel"
                        },
                        new
                        {
                            Id = new Guid("baadeac6-7fa3-4bf7-b473-473d9b2e4622"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sephora"
                        },
                        new
                        {
                            Id = new Guid("bb369028-5463-4d66-b24a-30b192019a83"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Estée Lauder"
                        },
                        new
                        {
                            Id = new Guid("c184ccef-24b4-44fe-9c30-623c8d9ecbea"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Clinique"
                        },
                        new
                        {
                            Id = new Guid("c396ba00-c243-45de-a53a-8ab0ae11c082"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "IKEA"
                        },
                        new
                        {
                            Id = new Guid("cbe5a9bd-a3b3-4126-9d17-9e342f5e5e1b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Herman Miller"
                        },
                        new
                        {
                            Id = new Guid("d3aa8c76-114b-464f-ac13-0440bcc222c4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Tok&Stok"
                        },
                        new
                        {
                            Id = new Guid("d3e93116-2e9a-42e0-9886-3f78d0575a9c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Westwing"
                        },
                        new
                        {
                            Id = new Guid("d65bac8a-ac9e-4b65-82b2-72379219c36d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Casas Bahia"
                        },
                        new
                        {
                            Id = new Guid("d6f4bd86-3214-4420-859a-f69b00e58164"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bosch"
                        },
                        new
                        {
                            Id = new Guid("d7c71163-e870-4b63-8ba6-8dbcf7c34d1f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Brastemp"
                        },
                        new
                        {
                            Id = new Guid("d9b56dc1-eb83-4b27-bc17-9aaf249ca254"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Electrolux"
                        },
                        new
                        {
                            Id = new Guid("daae8177-3923-45b6-9f7c-5f037b5a573b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Philips"
                        },
                        new
                        {
                            Id = new Guid("db36a17f-8484-4ae2-b36f-400ac05ba762"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Panasonic"
                        },
                        new
                        {
                            Id = new Guid("dc4ce02f-2127-4809-a717-024463411e21"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Samsung Home"
                        },
                        new
                        {
                            Id = new Guid("e4fe3974-f9c7-43fd-9f20-1c342a63c1bc"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Volkswagen"
                        },
                        new
                        {
                            Id = new Guid("e8bf1c3d-a396-4e02-9e20-7c87fe0e3d41"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = new Guid("f0d79347-e419-4e72-9aa5-bacd54f3487a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Honda"
                        },
                        new
                        {
                            Id = new Guid("f87a2b1b-b79f-4389-b61a-ea585129bcc1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ford"
                        },
                        new
                        {
                            Id = new Guid("f8fbb621-f6f5-43b2-8e4c-354572f909e8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Chevrolet"
                        },
                        new
                        {
                            Id = new Guid("fb4c2358-e346-4f5d-baba-67761cdf3dc7"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "BMW"
                        },
                        new
                        {
                            Id = new Guid("fef7e8e9-54eb-4b1b-be20-cea01bf93b1b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Mercedes-Benz"
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.OrderItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.OrderStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("StatusId");

                    b.ToTable("OrderStatusHistory");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InstallmentsNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.Property<float>("TotalPaid")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InstallmentsNumber")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TotalPaid")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PaymentMethod");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0aebae07-efce-4c70-a765-c6e1a8445b90"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Cartão de crédito"
                        },
                        new
                        {
                            Id = new Guid("3a604480-cc31-4c09-b34c-888849c8ba56"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Cartão de débito"
                        },
                        new
                        {
                            Id = new Guid("abc3e010-4215-4027-8817-6dd73487d709"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "MB WAY"
                        },
                        new
                        {
                            Id = new Guid("be437362-39a3-4da3-926f-50e4745e2759"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Referência Multibanco"
                        },
                        new
                        {
                            Id = new Guid("f727dd8e-fdbd-436f-b950-c22c251c2513"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "PayPal"
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.PaymentStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("StatusId");

                    b.ToTable("PaymentStatusHistory");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MakerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MakerId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDiscount", t =>
                        {
                            t.HasCheckConstraint("CK_Discount_Range", "\"ProductDiscount\".\"Discount\" >= 0 AND \"ProductDiscount\".\"Discount\" <= 1");
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrice");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Seller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Seller");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0225b611-6107-45ae-8792-a91264cc171a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Tech Solutions"
                        },
                        new
                        {
                            Id = new Guid("18679883-6207-4a03-8910-0ea9917f861d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Fashion Hub"
                        },
                        new
                        {
                            Id = new Guid("29ed19de-65bf-4eb9-99ab-0c9654b5b22c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Gamer Store"
                        },
                        new
                        {
                            Id = new Guid("4a8b6274-01ad-44fa-bf78-64c3a73feac8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Home & Decor"
                        },
                        new
                        {
                            Id = new Guid("5672e789-06ed-4033-bd6f-66968fa09801"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Pet Lovers"
                        },
                        new
                        {
                            Id = new Guid("7798bbf7-2c63-4344-b49e-0c8d590cafbe"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Supermarket Express"
                        },
                        new
                        {
                            Id = new Guid("7cb6b742-5121-42d6-b091-5d6a8ef3c7a8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Eco Friendly Market"
                        },
                        new
                        {
                            Id = new Guid("82a5f157-ca2d-43cc-921b-a24661b30964"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Smart Gadgets"
                        },
                        new
                        {
                            Id = new Guid("99c1fcbd-ae0d-4934-a264-7df5d4ef0d1a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Fitness World"
                        },
                        new
                        {
                            Id = new Guid("a126cee8-a14e-4f30-a937-6c78a0c29e20"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Luxury Watches"
                        },
                        new
                        {
                            Id = new Guid("a2757788-f4fe-4395-ac0d-f02ed7f89da9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Office Supplies"
                        },
                        new
                        {
                            Id = new Guid("ab6e152d-aea3-455e-806b-2832f15532f6"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Outdoor Adventure"
                        },
                        new
                        {
                            Id = new Guid("b0147209-86c0-46ca-8f63-a2a484f3b620"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Car Accessories"
                        },
                        new
                        {
                            Id = new Guid("b139337f-7aa0-4951-b692-479d523b3f61"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Book Haven"
                        },
                        new
                        {
                            Id = new Guid("bb90f150-62d9-4f65-ac81-544368c2b39b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Beauty Essentials"
                        },
                        new
                        {
                            Id = new Guid("c7fd9fba-c0e1-4c2f-b9e3-bd6b4a8ab8f0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Baby & Kids"
                        },
                        new
                        {
                            Id = new Guid("c9816f8e-5e78-4197-b383-6c9b43a02f85"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Handmade Crafts"
                        },
                        new
                        {
                            Id = new Guid("d9dd984f-f96f-49c3-a848-cc6a7ebb9162"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sports Gear"
                        },
                        new
                        {
                            Id = new Guid("ec9b11d8-ecc6-4d29-847c-833a5ae04ebf"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Automotive Parts"
                        },
                        new
                        {
                            Id = new Guid("f084b67f-2ad4-46bd-91e1-e39abd8f61b3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Vintage Finds"
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = new Guid("148a42ad-e148-43c9-8174-ea0436461bde"),
                            Description = "Pagamento em análise.",
                            Name = "Em Processamento",
                            Type = "Pagamento"
                        },
                        new
                        {
                            Id = new Guid("48416049-e247-4687-aa00-bffd4c8266b4"),
                            Description = "Pagamento não realizado.",
                            Name = "Falhado",
                            Type = "Pagamento"
                        },
                        new
                        {
                            Id = new Guid("581c7e3e-7595-41f9-8345-3f53b4c8d070"),
                            Description = "A aguardar pagamento.",
                            Name = "Pendente",
                            Type = "Pagamento"
                        },
                        new
                        {
                            Id = new Guid("7a9c935d-b6aa-4c56-b8cc-6bb4e44e14d0"),
                            Description = "Pagamento concluído com sucesso.",
                            Name = "Pago",
                            Type = "Pagamento"
                        },
                        new
                        {
                            Id = new Guid("82c32d44-a380-4a57-bb37-212e59816562"),
                            Description = "Pagamento devolvido ao cliente.",
                            Name = "Reembolsado",
                            Type = "Pagamento"
                        },
                        new
                        {
                            Id = new Guid("9b2c498a-04e1-41bd-bf5c-d0e0208f88e2"),
                            Description = "Pagamento cancelado pelo cliente.",
                            Name = "Cancelado",
                            Type = "Pagamento"
                        },
                        new
                        {
                            Id = new Guid("a78bf64a-a2c0-44cc-a8c4-7d4d44dcd39f"),
                            Description = "Pedido aceite pela loja.",
                            Name = "Confirmado",
                            Type = "Pedido"
                        },
                        new
                        {
                            Id = new Guid("bc4430c7-d401-416d-a394-0e93afcd6258"),
                            Description = "Pedido foi cancelado.",
                            Name = "Cancelado",
                            Type = "Pedido"
                        },
                        new
                        {
                            Id = new Guid("c50c6e4b-dde6-4477-bba5-ff2acc90968d"),
                            Description = "Pedido devolvido pelo cliente.",
                            Name = "Devolvido",
                            Type = "Pedido"
                        },
                        new
                        {
                            Id = new Guid("ca236c21-a82c-4f55-9d4c-36e6a7dbda7f"),
                            Description = "Pedido entregue ao cliente.",
                            Name = "Entregue",
                            Type = "Pedido"
                        },
                        new
                        {
                            Id = new Guid("ca6fd996-d245-40ce-8415-e47adabf05d4"),
                            Description = "Pedido a ser preparado.",
                            Name = "Em Processamento",
                            Type = "Pedido"
                        },
                        new
                        {
                            Id = new Guid("dee7068f-954b-4f4a-8d93-a9da05a478d4"),
                            Description = "Pedido recebido, a aguardar ação.",
                            Name = "Pendente",
                            Type = "Pedido"
                        },
                        new
                        {
                            Id = new Guid("f07ef34d-a0d9-4c60-b530-2dcdbd021f65"),
                            Description = "Pedido enviado para entrega.",
                            Name = "Enviado",
                            Type = "Pedido"
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04eb7890-d20f-47c9-b607-52f7484f8363"),
                            CategoryId = new Guid("89a470fd-ed2a-4b42-8049-f1e73ab9ed44"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Celulares e acessórios.",
                            Name = "Smartphones"
                        },
                        new
                        {
                            Id = new Guid("08c88c0f-6461-403c-979a-5352dd267fe9"),
                            CategoryId = new Guid("2b3fd91f-51a5-4134-a22c-c37eb4d03ffe"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Notebooks, desktops e hardware.",
                            Name = "Computadores"
                        },
                        new
                        {
                            Id = new Guid("09e25da9-3a99-4b9f-8b04-01937bdf13c5"),
                            CategoryId = new Guid("c8baf944-31f8-4b42-b7a9-4360ed654ca0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Televisores, soundbars e fones de ouvido.",
                            Name = "TVs e Áudio"
                        },
                        new
                        {
                            Id = new Guid("115d77cf-c211-4986-a7d6-19c9e9360647"),
                            CategoryId = new Guid("551d8bfb-3328-4952-b2be-fa6991fae8d3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Moda para homens.",
                            Name = "Roupas Masculinas"
                        },
                        new
                        {
                            Id = new Guid("16cf3a50-1808-4958-b720-14dad2acedbb"),
                            CategoryId = new Guid("7e036bab-a332-435a-a382-2503ab9cd39c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Moda para mulheres.",
                            Name = "Roupas Femininas"
                        },
                        new
                        {
                            Id = new Guid("1e8deee9-51f3-4e85-a979-b3c3adc6fab6"),
                            CategoryId = new Guid("467010a7-7eea-431b-be34-7f6b47a65ddd"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Sapatos, tênis e sandálias.",
                            Name = "Calçados"
                        },
                        new
                        {
                            Id = new Guid("2f878b61-309e-42b9-9087-187e98a2080d"),
                            CategoryId = new Guid("551d8bfb-3328-4952-b2be-fa6991fae8d3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Produtos de maquiagem.",
                            Name = "Maquiagem"
                        },
                        new
                        {
                            Id = new Guid("392c64ad-d7e9-44f3-9b41-3b8f3f1156f6"),
                            CategoryId = new Guid("714ebf08-6949-445b-b405-d7d1b133e23e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Fragrâncias masculinas e femininas.",
                            Name = "Perfumes"
                        },
                        new
                        {
                            Id = new Guid("419c3a3d-2421-489d-aa4a-77ab7d2d2157"),
                            CategoryId = new Guid("2b3fd91f-51a5-4134-a22c-c37eb4d03ffe"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Produtos para skincare.",
                            Name = "Cuidados com a Pele"
                        },
                        new
                        {
                            Id = new Guid("4c7d53b8-ccaf-42b5-ac55-26e4c6eef3bd"),
                            CategoryId = new Guid("1f22bf92-2a35-4cf8-b22a-502598f6bf56"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Sofás, cadeiras e mesas.",
                            Name = "Móveis"
                        },
                        new
                        {
                            Id = new Guid("4d8f71fd-8f53-449d-873c-cc9ddc38fe96"),
                            CategoryId = new Guid("2d0b1e97-31bf-4969-90d9-554085ade54f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Geladeiras, micro-ondas e fogões.",
                            Name = "Eletrodomésticos"
                        },
                        new
                        {
                            Id = new Guid("4da56038-d824-4f4e-89dd-1c459bb11d05"),
                            CategoryId = new Guid("c17b8d60-433b-4418-997c-823dd771aaaa"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Quadros, espelhos e tapetes.",
                            Name = "Decoração"
                        },
                        new
                        {
                            Id = new Guid("5c9ef436-b0c0-4c46-a0cd-91479d3f9c61"),
                            CategoryId = new Guid("551d8bfb-3328-4952-b2be-fa6991fae8d3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Aparelhos e acessórios para exercícios.",
                            Name = "Academia"
                        },
                        new
                        {
                            Id = new Guid("7b3c0948-8523-4512-8d0c-86a181b17fb1"),
                            CategoryId = new Guid("467010a7-7eea-431b-be34-7f6b47a65ddd"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Bicicletas e acessórios.",
                            Name = "Ciclismo"
                        },
                        new
                        {
                            Id = new Guid("7bc8bc28-40c3-475e-86b0-e62125040484"),
                            CategoryId = new Guid("eccfb727-247b-40a5-87eb-24b28329923d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Barracas, mochilas e lanternas.",
                            Name = "Camping e Aventura"
                        },
                        new
                        {
                            Id = new Guid("91ad3d51-6ecf-4352-878b-545158ca4996"),
                            CategoryId = new Guid("2b3fd91f-51a5-4134-a22c-c37eb4d03ffe"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Peças e acessórios para veículos.",
                            Name = "Peças"
                        },
                        new
                        {
                            Id = new Guid("91ba1f55-2bfc-472b-aa8d-557bd2d2290b"),
                            CategoryId = new Guid("714ebf08-6949-445b-b405-d7d1b133e23e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Aparelhos de som e multimídia.",
                            Name = "Som Automotivo"
                        },
                        new
                        {
                            Id = new Guid("94a5e536-608b-4a70-b0d0-14ae0fb970cc"),
                            CategoryId = new Guid("038463d9-a7b7-4e30-9669-9962c1a01b18"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Óleos e fluídos automotivos.",
                            Name = "Lubrificantes"
                        },
                        new
                        {
                            Id = new Guid("9f439954-a7ab-4231-bc38-cc0663b5ece4"),
                            CategoryId = new Guid("7e036bab-a332-435a-a382-2503ab9cd39c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Livros de romance, fantasia e drama.",
                            Name = "Ficção"
                        },
                        new
                        {
                            Id = new Guid("a0493846-8bd8-448b-8c9a-446cc043425a"),
                            CategoryId = new Guid("714ebf08-6949-445b-b405-d7d1b133e23e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Livros acadêmicos e técnicos.",
                            Name = "Didáticos"
                        },
                        new
                        {
                            Id = new Guid("a1faf56d-9c0b-4593-8f2d-769529351aec"),
                            CategoryId = new Guid("2d0b1e97-31bf-4969-90d9-554085ade54f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Livros para crianças.",
                            Name = "Infantil"
                        },
                        new
                        {
                            Id = new Guid("a2a77de5-c7ed-44fb-b4bd-03db99e31069"),
                            CategoryId = new Guid("467010a7-7eea-431b-be34-7f6b47a65ddd"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Brinquedos de ação e figuras.",
                            Name = "Bonecos"
                        },
                        new
                        {
                            Id = new Guid("ae13d949-a4f1-4cb7-bd65-aaa1e0969bf3"),
                            CategoryId = new Guid("9d662433-2d41-4844-96b9-9fdf3b3d0589"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Consoles e acessórios para jogos.",
                            Name = "Videogames"
                        },
                        new
                        {
                            Id = new Guid("af9f954d-260e-457d-ba28-2919d0adcfb6"),
                            CategoryId = new Guid("038463d9-a7b7-4e30-9669-9962c1a01b18"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Jogos para toda a família.",
                            Name = "Jogos de Tabuleiro"
                        },
                        new
                        {
                            Id = new Guid("b1cbd0b6-a2d4-4e7f-bb12-693d864dc3d2"),
                            CategoryId = new Guid("038463d9-a7b7-4e30-9669-9962c1a01b18"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Produtos para saúde e energia.",
                            Name = "Vitaminas e Suplementos"
                        },
                        new
                        {
                            Id = new Guid("b5570aa7-a9f8-48c7-ab72-c00b340ed98e"),
                            CategoryId = new Guid("814ea3c0-fac6-4e7a-a237-994c66cf8309"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Aparelhos de medição e primeiros socorros.",
                            Name = "Cuidados Médicos"
                        },
                        new
                        {
                            Id = new Guid("bad44db7-a993-41f0-ad7f-71468a4c4909"),
                            CategoryId = new Guid("7e036bab-a332-435a-a382-2503ab9cd39c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Alimentos para cães e gatos.",
                            Name = "Rações"
                        },
                        new
                        {
                            Id = new Guid("c9986069-d8be-4f46-8d65-eefc26aed70d"),
                            CategoryId = new Guid("1f22bf92-2a35-4cf8-b22a-502598f6bf56"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Brinquedos para animais de estimação.",
                            Name = "Brinquedos"
                        },
                        new
                        {
                            Id = new Guid("cf50e5b5-ba94-4094-9f8a-f532e6dc052c"),
                            CategoryId = new Guid("89a470fd-ed2a-4b42-8049-f1e73ab9ed44"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Furadeiras, serras e mais.",
                            Name = "Ferramentas Elétricas"
                        },
                        new
                        {
                            Id = new Guid("f0c040b4-2719-41f5-adf6-a8534b6159be"),
                            CategoryId = new Guid("814ea3c0-fac6-4e7a-a237-994c66cf8309"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Vinhos tintos, brancos e espumantes.",
                            Name = "Vinhos"
                        },
                        new
                        {
                            Id = new Guid("fafec402-0328-4a34-9f42-9ed49cc7737c"),
                            CategoryId = new Guid("2d0b1e97-31bf-4969-90d9-554085ade54f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Teclados, mouses e monitores.",
                            Name = "Periféricos"
                        },
                        new
                        {
                            Id = new Guid("fb29432b-9521-4f86-ae94-abdfde67476b"),
                            CategoryId = new Guid("1f22bf92-2a35-4cf8-b22a-502598f6bf56"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Cadernos, canetas e mochilas.",
                            Name = "Material Escolar"
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AlternativeAddress")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2587a6b7-0606-4355-9791-187993b185fb"),
                            Address = "Rua das Flores, 120",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "lucas.silva@example.com",
                            FirstName = "Lucas",
                            LastName = "Silva",
                            Password = "$2a$11$.HBnurdCauTaWcDGV83V/O2Kj4VqN2H0e49/YPYb0zfhtv6GRZBma",
                            PhoneNumber = "912345678",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = new Guid("26fba044-0f72-4eb2-a22f-1aa5133f3597"),
                            Address = "Avenida Paulista, 350",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "mariana.santos@example.com",
                            FirstName = "Mariana",
                            LastName = "Santos",
                            Password = "$2a$11$OJOWpihl5yP60WoryuOAn.3aLdwic37D19Ly6shPgLgXOMQe9JVXS",
                            PhoneNumber = "922345678",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = new Guid("357766ff-0ea4-4e41-95e5-dc091d07dce6"),
                            Address = "Rua do Comércio, 45",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "ricardo.mendes@example.com",
                            FirstName = "Ricardo",
                            LastName = "Mendes",
                            Password = "$2a$11$ZEk3pXUAgUDtj0DHTVvulO21OkzK1TO5S5oevlSN3jE2.VBfXK4TS",
                            PhoneNumber = "932345678",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = new Guid("457bce7f-2925-43b2-8ea1-9e16d214c4d4"),
                            Address = "Praça Central, 90",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "fernanda.lima@example.com",
                            FirstName = "Fernanda",
                            LastName = "Lima",
                            Password = "$2a$11$hlFBmawwEXKlAYScuZmnZOMoLW/uFxaXT3pVCALpH4.vw2vfcJCnS",
                            PhoneNumber = "942345678",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = new Guid("470a4a17-033a-43ab-890f-5bfa2dc58c11"),
                            Address = "Travessa do Sol, 10",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "eduardo.almeida@example.com",
                            FirstName = "Eduardo",
                            LastName = "Almeida",
                            Password = "$2a$11$fkTMYiriw6Nqa.ORepJxveU3.1CrQvf3N8819MLUIF2hAYVXNQkBq",
                            PhoneNumber = "952345678",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = new Guid("5d3a0719-ec82-47cf-9dc6-09742a90e699"),
                            Address = "Rua das Oliveiras, 200",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "ana.ferreira@example.com",
                            FirstName = "Ana",
                            LastName = "Ferreira",
                            Password = "$2a$11$IpcoSMaXAU/TKhjwKwgpSuXiuTV4cwkt8gFn3YOFMyiywViG.1mQq",
                            PhoneNumber = "962345678",
                            Role = "User"
                        },
                        new
                        {
                            Id = new Guid("75cd8061-acbc-4ebd-92a5-1f10513c49f6"),
                            Address = "Avenida Brasil, 410",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "carlos.pereira@example.com",
                            FirstName = "Carlos",
                            LastName = "Pereira",
                            Password = "$2a$11$RZHsIom/h3HgYbgUVOOJAO1NiCMgZjIso6BE/cLikSl9gqSHFyuOu",
                            PhoneNumber = "972345678",
                            Role = "User"
                        },
                        new
                        {
                            Id = new Guid("9a1e850e-4d06-4046-aca7-8e3b5a2e6ecb"),
                            Address = "Rua Nova, 78",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "beatriz.costa@example.com",
                            FirstName = "Beatriz",
                            LastName = "Costa",
                            Password = "$2a$11$K05QB8LpYUg2QGj7smilG.ewJn3fb.zgfLhj6oyR7FK/VspUYN96K",
                            PhoneNumber = "982345678",
                            Role = "User"
                        },
                        new
                        {
                            Id = new Guid("9f7a4dc4-1834-40e6-93ef-feaf829fc2b4"),
                            Address = "Vila do Mar, 35",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "guilherme.rodrigues@example.com",
                            FirstName = "Guilherme",
                            LastName = "Rodrigues",
                            Password = "$2a$11$UqWyyOPZc5o48Y09fQ/1EesTqBd4uz592iZVskfHvPicHnmqSrdha",
                            PhoneNumber = "992345678",
                            Role = "User"
                        },
                        new
                        {
                            Id = new Guid("c3943215-fcb6-40d3-a813-2f952b721f0d"),
                            Address = "Rua do Lago, 88",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "sofia.martins@example.com",
                            FirstName = "Sofia",
                            LastName = "Martins",
                            Password = "$2a$11$yOZx1SKNTCdZAvLRkwHxSu.xV5o0a3vyjcU37l2ZIP730.7UbUHWu",
                            PhoneNumber = "1002345678",
                            Role = "User"
                        },
                        new
                        {
                            Id = new Guid("ce88e8d1-0c0d-41a8-983e-932c2a7a99fc"),
                            Address = "Estrada Velha, 101",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "joao.carvalho@example.com",
                            FirstName = "João",
                            LastName = "Carvalho",
                            Password = "$2a$11$wVn7HKNdLUp7RrqyHUz5CevJbaO.T.tGh2f5e7teraaUYfsMQ42D2",
                            PhoneNumber = "1102345678",
                            Role = "User"
                        },
                        new
                        {
                            Id = new Guid("d20cf5b1-fca3-4a88-ab52-fea58d34f25d"),
                            Address = "Avenida das Árvores, 75",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "camila.ribeiro@example.com",
                            FirstName = "Camila",
                            LastName = "Ribeiro",
                            Password = "$2a$11$FmtH2EctaEjw9Ac5OIKFK.15sBGeyi4k7yTnujRVesoiwvGQPVw3O",
                            PhoneNumber = "1202345678",
                            Role = "User"
                        },
                        new
                        {
                            Id = new Guid("d74473dd-4cfb-421b-9a97-8a48de482804"),
                            Address = "Rua Pequena, 30",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "thiago.gomes@example.com",
                            FirstName = "Thiago",
                            LastName = "Gomes",
                            Password = "$2a$11$MMosDT3PLRFlTZEpvvsZie9mRacVisV0uwkRoZ9awPXUJFvg0uwbC",
                            PhoneNumber = "1302345678",
                            Role = "User"
                        },
                        new
                        {
                            Id = new Guid("e525b409-dfa7-4f7b-97df-d47c4f61bc99"),
                            Address = "Alameda Azul, 22",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "larissa.duarte@example.com",
                            FirstName = "Larissa",
                            LastName = "Duarte",
                            Password = "$2a$11$oAEYFBb6H9owCkQgaVyt1enNs0s9WB.O8Ea4.M7n7ppOO6L0m7iNu",
                            PhoneNumber = "1402345678",
                            Role = "User"
                        },
                        new
                        {
                            Id = new Guid("f7a7da30-33db-454e-a2eb-574e9a834b59"),
                            Address = "Vila das Rosas, 55",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 10, 10, 559, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "pedro.nunes@example.com",
                            FirstName = "Pedro",
                            LastName = "Nunes",
                            Password = "$2a$11$wDzdFa5h3RoyWSoMPTmXNOATjH43nOsf2A.shW8F0qxLc1gWRvhHW",
                            PhoneNumber = "1502345678",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a2b3c4d-5e6f-7890-1234-56789abcdef0"),
                            Description = "Has full access to the system and can manage other users.",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("2b3c4d5e-6f78-9012-3456-789abcdef123"),
                            Description = "Can manage product listings and view sales reports.",
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("3c4d5e6f-7890-1234-5678-9abcdef01234"),
                            Description = "Can browse products, place orders, and track deliveries.",
                            Name = "Customer"
                        },
                        new
                        {
                            Id = new Guid("4d5e6f78-9012-3456-789a-bcdef1234567"),
                            Description = "Can manage inventory and supply chain logistics.",
                            Name = "Supplier"
                        },
                        new
                        {
                            Id = new Guid("5e6f7890-1234-5678-9abc-def012345678"),
                            Description = "Handles customer support and resolves user issues.",
                            Name = "Support"
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Cart", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Order", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.OrderItems", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.OrderStatusHistory", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.PaymentStatusHistory", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Product", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Maker", "Maker")
                        .WithMany()
                        .HasForeignKey("MakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Maker");

                    b.Navigation("Seller");

                    b.Navigation("SubCategory");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductDiscount", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductPrice", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.SubCategory", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
